#import * from "./generated/prisma.graphql"

type SuccessMessage {
  message: String
}

type Mutation {
  createQuestion(
    title: String!
    description: String
    tags: [TagInput!]!
  ): Question!
  deleteAnswer(id: ID!): Answer
  deleteAnswerVote(id: ID!): AnswerVote
  createAnswer(body: String!, questionId: ID!): Answer!
  createBlog(blocks: [BlocksWhereInput]): Blog!
  createTag(name: String!): Tag!
  signup(
    email: String!
    password: String!
    name: String!
    display: String!
  ): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  updateAnswer(id: ID!, body: String, approval: Boolean): Answer!
  selectAnswer(id: ID!): Answer!
  createQuestionView(questionId: ID!): Boolean
  createQuestionVote(questionId: ID!, vote: String): Boolean
  createAnswerVote(answerId: ID!, vote: String): AnswerVote
  updateUser(
    id: ID!
    email: String!
    name: String!
    display: String!
    image: String
    location: String
    about: String
    industry: String
  ): User!
  updateQuestion(
    id: ID!
    title: String
    description: String
    approval: Boolean
    tags: [TagInput!]
  ): Question!
  updatePermissions(permissions: [Permission], userId: ID!): User
}

type Query {
  me: User
  user(id: ID!): User
  users: [User]!
  tags(first: Int, where: TagWhereInput): [Tag!]!
  questions(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question]!
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    filter: String!
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer]!
  questionsConnection(
    where: QuestionWhereInput
    orderBy: QuestionOrderByInput
    filter: String
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): QuestionConnection!
  question(id: ID!): Question
  answer(id: ID!): Answer
  answerVote(where: AnswerVoteWhereUniqueInput!): AnswerVote
}

input TagInput {
  name: String
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  display: String!
  image: String
  location: String
  about: String
  industry: String
  permissions: [Permission!]!
  myQuestions: [Question!]!
  myAnswers: [Answer!]!
  badges: Badges
}

type Badges {
  autobiographer: Boolean
  critic: Boolean
  patron: Boolean
  reviewer: Boolean
  analyst: Boolean
  commentor: Boolean
  frequentFlyer: Boolean
}

type Answer {
  id: ID!
  body: String!
  answeredBy: User!
  approval: Boolean
  selected: Boolean
  answeredTo(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Question!]
  createdAt: DateTime!
  updatedAt: DateTime!
  upVotes: Int
  downVotes: Int
  answerVote: [AnswerVote]
}

type Question implements Node {
  id: ID!
  tags(
    where: TagWhereInput
    orderBy: TagOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Tag!]
  title: String!
  description: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  approval: Boolean
  askedBy(
    where: UserWhereInput
    orderBy: UserOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [User!]
  answers(
    where: AnswerWhereInput
    orderBy: AnswerOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Answer!]
  views: Int
  upVotes: Int
  downVotes: Int
  questionVote: [QuestionVote]
}

type Blog implements Node {
  id: ID!
  blocks(
    where: BlocksWhereInput
    orderBy: BlocksOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Blocks!]
}

type Blocks implements Node {
  id: ID!
  text: String
  type: String
  depth: Int
}
